import streamlit as st
st.set_page_config(layout="wide", page_title="Strat√©gie de Trading Multi-Facteurs", page_icon="üìà")



# *** Installation des biblioth√®ques n√©cessaires ***
# D√©commentez ces lignes lorsque vous ex√©cutez pour la premi√®re fois
# !pip install yfinance pandas numpy matplotlib streamlit seaborn vaderSentiment requests python-dotenv plotly

# *** Import des modules ***

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
import requests
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import time
import warnings
warnings.filterwarnings('ignore')

# *** Configuration et chargement des variables d'environnement ***
load_dotenv()  # Charger les variables depuis un fichier .env

# Pour les tests, vous pouvez remplacer cette ligne par votre cl√© API directement
# Dans un environnement de production, utilisez un fichier .env ou les secrets de Streamlit
API_KEY = os.getenv("FINNHUB_API_KEY", "d012njpr01qv3oh2b3a0d012njpr01qv3oh2b3ag")

# *** D√©finition des constantes ***
DEFAULT_PERIOD = "6mo"
DEFAULT_INTERVAL = "1d"
DEFAULT_SMA_SHORT = 20
DEFAULT_SMA_LONG = 50
DEFAULT_RSI_WINDOW = 14
SENTIMENT_DAYS = 7
PER_THRESHOLD = 25
ROE_THRESHOLD = 0.10
DE_THRESHOLD = 1.5

# *** Partie 1: R√©cup√©ration et traitement des donn√©es ***

def get_price_data(ticker, period=DEFAULT_PERIOD, interval=DEFAULT_INTERVAL):
    """
    R√©cup√®re les donn√©es historiques de prix pour un ticker sp√©cifi√©
    """
    try:
        stock = yf.Ticker(ticker)
        hist = stock.history(period=period, interval=interval)
        
        if hist.empty:
            st.error(f"Aucune donn√©e disponible pour {ticker}")
            return pd.DataFrame()
            
        return hist
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration des donn√©es: {str(e)}")
        return pd.DataFrame()

# *** Partie 2: Indicateurs techniques ***

def add_sma(df, short=DEFAULT_SMA_SHORT, long=DEFAULT_SMA_LONG):
    """
    Ajoute les moyennes mobiles simples (SMA) au DataFrame
    """
    df[f"SMA{short}"] = df["Close"].rolling(window=short).mean()
    df[f"SMA{long}"] = df["Close"].rolling(window=long).mean()
    return df

def compute_rsi(df, window=DEFAULT_RSI_WINDOW):
    """
    Calcule le Relative Strength Index (RSI)
    """
    delta = df["Close"].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    
    avg_gain = gain.rolling(window=window).mean()
    avg_loss = loss.rolling(window=window).mean()
    
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    df["RSI"] = rsi
    return df

def compute_macd(df):
    """
    Calcule le Moving Average Convergence Divergence (MACD)
    """
    ema12 = df["Close"].ewm(span=12, adjust=False).mean()
    ema26 = df["Close"].ewm(span=26, adjust=False).mean()
    df["MACD"] = ema12 - ema26
    df["Signal_Line"] = df["MACD"].ewm(span=9, adjust=False).mean()
    df["MACD_Histogram"] = df["MACD"] - df["Signal_Line"]
    return df

def compute_bollinger_bands(df, window=20, num_std=2):
    """
    Ajoute les bandes de Bollinger au DataFrame
    """
    rolling_mean = df['Close'].rolling(window=window).mean()
    rolling_std = df['Close'].rolling(window=window).std()
    
    df['Bollinger_Upper'] = rolling_mean + (rolling_std * num_std)
    df['Bollinger_Middle'] = rolling_mean
    df['Bollinger_Lower'] = rolling_mean - (rolling_std * num_std)
    return df

def compute_atr(df, window=14):
    """
    Calcule l'Average True Range (ATR)
    """
    high_low = df['High'] - df['Low']
    high_close = np.abs(df['High'] - df['Close'].shift())
    low_close = np.abs(df['Low'] - df['Close'].shift())
    
    ranges = pd.concat([high_low, high_close, low_close], axis=1)
    true_range = np.max(ranges, axis=1)
    
    df['ATR'] = true_range.rolling(window=window).mean()
    return df

def compute_stochastic(df, k_window=14, d_window=3):
    """
    Calcule l'oscillateur stochastique
    """
    lowest_low = df['Low'].rolling(window=k_window).min()
    highest_high = df['High'].rolling(window=k_window).max()
    
    df['Stoch_K'] = 100 * ((df['Close'] - lowest_low) / (highest_high - lowest_low))
    df['Stoch_D'] = df['Stoch_K'].rolling(window=d_window).mean()
    return df

# *** Partie 3: G√©n√©ration des signaux techniques ***

def generate_signals(df):
    """
    G√©n√®re des signaux d'achat et de vente bas√©s sur les indicateurs techniques
    """
    # Trouver quelle colonne SMA court terme est pr√©sente dans le DataFrame
    sma_columns = [col for col in df.columns if col.startswith('SMA')]
    if not sma_columns:
        raise ValueError("Aucune colonne SMA trouv√©e dans le DataFrame")
    
    # Utiliser la premi√®re SMA trouv√©e (g√©n√©ralement la plus courte)
    sma_short_col = min(sma_columns, key=lambda x: int(x.replace('SMA', '')))
    
    # Signal long si le prix est au-dessus de la SMA courte, RSI pas trop √©lev√©, MACD > Signal_Line
    df["Signal_Long"] = (
        (df["Close"] > df[sma_short_col]) &
        (df["RSI"] < 70) &
        (df["MACD"] > df["Signal_Line"])
    )
    
    # Signal short si le prix est en dessous de la SMA courte, RSI pas trop bas, MACD < Signal_Line
    df["Signal_Short"] = (
        (df["Close"] < df[sma_short_col]) &
        (df["RSI"] > 30) &
        (df["MACD"] < df["Signal_Line"])
    )
    
    # Attribution des signaux
    df["Signal"] = np.select(
        [df["Signal_Long"], df["Signal_Short"]],
        ["long", "short"],
        default="hold"
    )
    
    return df

def generate_advanced_signals(df):
    """
    G√©n√®re des signaux plus avanc√©s incluant les bandes de Bollinger et Stochastique
    """
    # Signaux bas√©s sur BB (survente/surachat)
    df["BB_Long"] = df["Close"] < df["Bollinger_Lower"]
    df["BB_Short"] = df["Close"] > df["Bollinger_Upper"]
    
    # Signaux bas√©s sur Stochastique
    df["Stoch_Long"] = (df["Stoch_K"] < 20) & (df["Stoch_K"] > df["Stoch_K"].shift(1))
    df["Stoch_Short"] = (df["Stoch_K"] > 80) & (df["Stoch_K"] < df["Stoch_K"].shift(1))
    
    # Signaux combin√©s (plus conservateurs)
    df["Advanced_Long"] = (
        df["Signal_Long"] &
        (df["BB_Long"] | df["Stoch_Long"])
    )
    
    df["Advanced_Short"] = (
        df["Signal_Short"] &
        (df["BB_Short"] | df["Stoch_Short"])
    )
    
    # Attribution des signaux avanc√©s
    df["Advanced_Signal"] = np.select(
        [df["Advanced_Long"], df["Advanced_Short"]],
        ["long", "short"],
        default="hold"
    )
    
    return df

# *** Partie 4: Analyse des actualit√©s ***

def get_finnhub_news(ticker, from_date, to_date):
    """
    R√©cup√®re les actualit√©s pour un ticker via l'API Finnhub
    """
    url = "https://finnhub.io/api/v1/company-news"
    
    try:
        params = {"symbol": ticker, "from": from_date, "to": to_date, "token": API_KEY}
        response = requests.get(url, params=params, timeout=10)
        
        if response.status_code == 429:
            st.warning("Limite d'API atteinte. Nouvelle tentative dans quelques secondes...")
            time.sleep(2)  # Attendre avant de r√©essayer
            return get_finnhub_news(ticker, from_date, to_date)
            
        if response.status_code != 200:
            st.warning(f"Erreur API Finnhub: {response.status_code}. Utilisation de donn√©es simul√©es.")
            # Retourner des donn√©es simul√©es en cas d'erreur API
            return simulate_news_data(ticker)
        
        data = response.json()
        
        # Traitement des articles
        news = []
        for article in data:
            title = article.get('headline', '')
            description = article.get('summary', '')
            if title or description:  # V√©rifier qu'il y a du contenu
                news.append({
                    'title': title,
                    'description': description,
                    'publishedAt': datetime.fromtimestamp(article.get('datetime', 0)),
                    'url': article.get('url', '')
                })
        
        if not news:
            st.warning(f"Aucune actualit√© trouv√©e pour {ticker}. Utilisation de donn√©es simul√©es.")
            return simulate_news_data(ticker)
            
        return pd.DataFrame(news)
        
    except Exception as e:
        st.warning(f"Erreur lors de la r√©cup√©ration des actualit√©s: {str(e)}. Utilisation de donn√©es simul√©es.")
        return simulate_news_data(ticker)

def simulate_news_data(ticker):
    """
    G√©n√®re des donn√©es d'actualit√©s simul√©es en cas d'√©chec de l'API
    """
    today = datetime.now()
    
    # Cr√©er des actualit√©s fictives bas√©es sur le ticker
    simulated_news = [
        {
            'title': f"{ticker} annonce ses r√©sultats trimestriels",
            'description': f"L'entreprise {ticker} a publi√© des r√©sultats sup√©rieurs aux attentes des analystes pour ce trimestre.",
            'publishedAt': today - timedelta(days=1),
            'url': '#'
        },
        {
            'title': f"Nouveau produit lanc√© par {ticker}",
            'description': f"{ticker} a lanc√© un nouveau produit qui pourrait augmenter significativement ses revenus.",
            'publishedAt': today - timedelta(days=3),
            'url': '#'
        },
        {
            'title': f"Analyse du march√©: impact sur {ticker}",
            'description': f"Les analystes pr√©disent une croissance stable pour {ticker} malgr√© les conditions de march√© difficiles.",
            'publishedAt': today - timedelta(days=5),
            'url': '#'
        }
    ]
    
    return pd.DataFrame(simulated_news)

def analyze_sentiment(df):
    """
    Analyse le sentiment des actualit√©s avec VADER
    """
    analyzer = SentimentIntensityAnalyzer()
    
    # Fonction pour analyser le sentiment d'un texte
    def get_sentiment(text):
        if not isinstance(text, str) or not text.strip():
            return 0
        return analyzer.polarity_scores(text)["compound"]
    
    # Appliquer l'analyse de sentiment aux titres et descriptions
    df["title_sentiment"] = df["title"].apply(get_sentiment)
    df["description_sentiment"] = df["description"].apply(get_sentiment)
    
    # Combinaison des scores (titre a plus de poids)
    df["sentiment_score"] = (df["title_sentiment"] * 0.7) + (df["description_sentiment"] * 0.3)
    
    return df

def get_recent_news(ticker, days=SENTIMENT_DAYS):
    """
    R√©cup√®re et analyse les actualit√©s r√©centes pour un ticker
    """
    to_date = datetime.now()
    from_date = to_date - timedelta(days=days)
    
    df = get_finnhub_news(ticker, from_date.strftime('%Y-%m-%d'), to_date.strftime('%Y-%m-%d'))
    
    if not df.empty:
        df = analyze_sentiment(df)
        
    return df

def get_news_signal(sentiment_score, seuil_pos=0.2, seuil_neg=-0.2):
    """
    G√©n√®re un signal bas√© sur le sentiment des actualit√©s
    """
    if sentiment_score is None:
        return "hold"
    if sentiment_score >= seuil_pos:
        return "buy"
    elif sentiment_score <= seuil_neg:
        return "sell"
    else:
        return "hold"

# *** Partie 5: Analyse fondamentale ***

def get_fundamentals(ticker):
    """
    R√©cup√®re les donn√©es fondamentales pour un ticker
    """
    try:
        stock = yf.Ticker(ticker)
        info = stock.info
        
        # R√©cup√©rer les ratios cl√©s
        per = info.get("trailingPE")
        roe = info.get("returnOnEquity")
        de = info.get("debtToEquity")  # En pourcentage
        
        # Donn√©es financi√®res suppl√©mentaires
        market_cap = info.get("marketCap")
        dividend_yield = info.get("dividendYield")
        beta = info.get("beta")
        sector = info.get("sector", "Unknown")
        
        return {
            "per": per,
            "roe": roe,
            "de": de,
            "market_cap": market_cap,
            "dividend_yield": dividend_yield,
            "beta": beta,
            "sector": sector
        }
    except Exception as e:
        st.warning(f"Erreur lors de la r√©cup√©ration des fondamentaux: {str(e)}")
        return {
            "per": None,
            "roe": None,
            "de": None,
            "market_cap": None,
            "dividend_yield": None,
            "beta": None,
            "sector": "Unknown"
        }

def is_fundamentally_solid(ticker, per_thresh=PER_THRESHOLD, roe_thresh=ROE_THRESHOLD, de_thresh=DE_THRESHOLD):
    """
    √âvalue si une entreprise est fondamentalement solide
    """
    fundamentals = get_fundamentals(ticker)
    
    per = fundamentals["per"]
    roe = fundamentals["roe"]
    de = fundamentals["de"]
    
    if per is None or roe is None or de is None:
        return per, roe, de, "hold"
        
    # G√©n√©ration du signal
    if per < per_thresh and roe > roe_thresh and (de is None or de < de_thresh * 100):
        signal = "buy"
    elif per > per_thresh * 1.5 or (roe is not None and roe < roe_thresh / 2) or (de is not None and de > de_thresh * 150):
        signal = "sell"
    else:
        signal = "hold"
        
    return per, roe, de, signal

# *** Partie 6: Macro-√©conomie ***

def get_macro_indicators():
    """
    R√©cup√®re des indicateurs macro√©conomiques via yfinance
    """
    try:
        macro_data = {}
        
        # Indices comme le VIX pour la volatilit√© du march√©
        vix_data = yf.Ticker("^VIX").history(period="1mo")
        if not vix_data.empty:
            macro_data['VIX'] = vix_data['Close'].iloc[-1]
            macro_data['VIX_change'] = ((vix_data['Close'].iloc[-1] / vix_data['Close'].iloc[0]) - 1) * 100
        
        # S&P 500 (tendance g√©n√©rale du march√©)
        sp500_data = yf.Ticker("^GSPC").history(period="1mo")
        if not sp500_data.empty:
            macro_data['SP500_change'] = ((sp500_data['Close'].iloc[-1] / sp500_data['Close'].iloc[0]) - 1) * 100
        
        # Taux des bons du Tr√©sor am√©ricain √† 10 ans
        bonds_data = yf.Ticker("^TNX").history(period="1mo")
        if not bonds_data.empty:
            macro_data['Taux_10ans'] = bonds_data['Close'].iloc[-1]
            macro_data['Taux_10ans_change'] = bonds_data['Close'].iloc[-1] - bonds_data['Close'].iloc[0]
        
        return macro_data
        
    except Exception as e:
        st.warning(f"Erreur lors de la r√©cup√©ration des donn√©es macro: {str(e)}")
        return {}

def get_macro_signal(macro_data):
    """
    G√©n√®re un signal bas√© sur les indicateurs macro√©conomiques
    """
    # R√®gles simplifi√©es pour l'exemple
    if not macro_data:
        return "neutral"
        
    # Signaux n√©gatifs
    if macro_data.get('VIX', 0) > 30 or macro_data.get('VIX_change', 0) > 15:
        return "bearish"  # Forte volatilit√© = signal baissier
        
    # Signaux positifs
    if macro_data.get('SP500_change', 0) > 5 and macro_data.get('VIX', 100) < 20:
        return "bullish"  # March√© haussier avec faible volatilit√©
        
    # Par d√©faut
    return "neutral"

# *** Partie 7: √âvaluation des signaux et backtest ***

def evaluate_signals(df):
    """
    √âvalue les signaux en calculant les retours sur 5 jours apr√®s chaque signal
    """
    # Calculer les retours sur diff√©rentes p√©riodes (1, 5, 10 jours)
    df['Return_1d'] = df['Close'].pct_change(periods=1).shift(-1)
    df['Return_5d'] = df['Close'].pct_change(periods=5).shift(-5)
    df['Return_10d'] = df['Close'].pct_change(periods=10).shift(-10)
    
    return df

def generate_final_signal(df, ticker, sentiments, fundamentals=None, macro_signal="neutral"):
    """
    G√©n√®re un signal final en combinant technique + news + fondamentaux + macro
    """
    # R√©cup√©rer les scores de sentiment
    sentiment_value = sentiments.get(ticker)
    news_signal = get_news_signal(sentiment_value)
    
    # R√©cup√©rer le signal fondamental si non fourni
    if fundamentals is None:
        _, _, _, fund_signal = is_fundamentally_solid(ticker)
    else:
        fund_signal = fundamentals.get('signal', 'hold')
    
    # Par d√©faut, on conserve le signal technique
    df['Final_Signal'] = df['Signal']
    
    # Appliquer des r√®gles pour le signal final (derni√®re ligne seulement)
    latest_idx = df.index[-1]
    
    # R√®gles de combinaison
    tech_signal = df.loc[latest_idx, 'Signal']
    
    # 1. Si tous les signaux sont coh√©rents, signal fort
    if tech_signal == "long" and news_signal == "buy" and fund_signal == "buy" and macro_signal in ["neutral", "bullish"]:
        df.loc[latest_idx, 'Final_Signal'] = "strong_buy"
    elif tech_signal == "short" and news_signal == "sell" and fund_signal == "sell" and macro_signal in ["neutral", "bearish"]:
        df.loc[latest_idx, 'Final_Signal'] = "strong_sell"
    
    # 2. Si signaux contradictoires, neutraliser
    elif tech_signal == "long" and (news_signal == "sell" or fund_signal == "sell" or macro_signal == "bearish"):
        df.loc[latest_idx, 'Final_Signal'] = "hold"
    elif tech_signal == "short" and (news_signal == "buy" or fund_signal == "buy" or macro_signal == "bullish"):
        df.loc[latest_idx, 'Final_Signal'] = "hold"
    
    # R√©sum√© des facteurs
    df.loc[latest_idx, 'Tech_Signal'] = tech_signal
    df.loc[latest_idx, 'News_Signal'] = news_signal
    df.loc[latest_idx, 'Fund_Signal'] = fund_signal
    df.loc[latest_idx, 'Macro_Signal'] = macro_signal
    
    # Remplir pour les lignes pr√©c√©dentes pour √©viter les NaN
    df['Tech_Signal'].fillna(method='ffill', inplace=True)
    df['News_Signal'].fillna(news_signal, inplace=True)
    df['Fund_Signal'].fillna(fund_signal, inplace=True)
    df['Macro_Signal'].fillna(macro_signal, inplace=True)
        
    return df

def backtest_signals(df):
    """
    Effectue un backtest simple des signaux
    """
    # Initialiser les colonnes de performance
    df['Long_Return'] = np.where(df['Signal'] == "long", df['Return_5d'], 0)
    df['Short_Return'] = np.where(df['Signal'] == "short", -df['Return_5d'], 0)
    df['Strategy_Return'] = df['Long_Return'] + df['Short_Return']
    
    # Calculer les rendements cumul√©s
    df['Cumulative_Strategy_Return'] = (1 + df['Strategy_Return']).cumprod() - 1
    df['Cumulative_Market_Return'] = (1 + df['Return_5d']).cumprod() - 1
    
    return df

def resume_backtest(df):
    """
    Affiche un r√©sum√© des performances du backtest
    """
    stats = {}
    
    # Nombre de signaux
    nb_longs = len(df[df['Signal'] == "long"])
    nb_shorts = len(df[df['Signal'] == "short"])
    stats["nb_longs"] = nb_longs
    stats["nb_shorts"] = nb_shorts
    
    # Taux de r√©ussite
    win_longs = len(df[(df['Signal'] == "long") & (df['Return_5d'] > 0)])
    win_shorts = len(df[(df['Signal'] == "short") & (df['Return_5d'] < 0)])
    
    if nb_longs > 0:
        success_rate_long = win_longs / nb_longs * 100
        stats["success_rate_long"] = success_rate_long
    else:
        stats["success_rate_long"] = None
        
    if nb_shorts > 0:
        success_rate_short = win_shorts / nb_shorts * 100
        stats["success_rate_short"] = success_rate_short
    else:
        stats["success_rate_short"] = None
    
    # Performance globale
    if 'Cumulative_Strategy_Return' in df.columns and len(df) > 0:
        final_return = df['Cumulative_Strategy_Return'].iloc[-1]
        stats["final_return"] = final_return
        
        # Compare with buy & hold
        if 'Cumulative_Market_Return' in df.columns:
            market_return = df['Cumulative_Market_Return'].iloc[-1]
            stats["market_return"] = market_return
            stats["alpha"] = final_return - market_return
    
    return stats

def calculate_position_size(df, ticker, capital=10000, risk_pct=1):
    """
    Calcule la taille de position optimale bas√©e sur l'ATR et le capital disponible
    """
    # S'assurer que l'ATR est calcul√©
    if 'ATR' not in df.columns:
        df = compute_atr(df)
    
    latest_close = df['Close'].iloc[-1]
    latest_atr = df['ATR'].iloc[-1]
    
    # Stop loss bas√© sur ATR (2 ATR)
    stop_loss = 2 * latest_atr
    
    # Capital risqu√©
    capital_at_risk = capital * (risk_pct / 100)
    
    # Nombre d'actions
    num_shares = capital_at_risk / stop_loss
    
    # Co√ªt total
    position_cost = num_shares * latest_close
    
    return {
        'ticker': ticker,
        'close_price': latest_close,
        'atr': latest_atr,
        'stop_loss_price': latest_close - stop_loss if df['Signal'].iloc[-1] == "long" else latest_close + stop_loss,
        'stop_loss_pct': (stop_loss / latest_close) * 100,
        'capital_at_risk': capital_at_risk,
        'num_shares': int(num_shares),
        'position_cost': position_cost
    }

def tableau_synthetique(resultats, sentiments, per_thresh=PER_THRESHOLD, roe_thresh=ROE_THRESHOLD, de_thresh=DE_THRESHOLD, window=5):
    """
    Cr√©e un tableau synth√©tique des signaux pour tous les tickers
    """
    def map_to_emoji(signal, is_tech=False):
        if signal in ["buy", "long", "strong_buy"] or (is_tech and signal == "long"):
            return "üü¢"
        elif signal in ["sell", "short", "strong_sell"] or (is_tech and signal == "short"):
            return "üî¥"
        else:
            return "üü°"

    tableau = []
    for ticker, df in resultats.items():
        if df.empty:
            continue
            
        df_tail = df.tail(window).copy()

        # Moyennes des indicateurs sur les derniers jours
        close_mean = df_tail["Close"].mean()
        sma20_mean = df_tail["SMA20"].mean() if "SMA20" in df_tail.columns else None
        rsi_mean = df_tail["RSI"].mean() if "RSI" in df_tail.columns else None
        macd_mean = df_tail["MACD"].mean() if "MACD" in df_tail.columns else None

        # R√©cup√©ration du dernier signal technique
        last_signal = df_tail["Signal"].iloc[-1] if "Signal" in df_tail.columns else "hold"
        
        # Signal presse
        avg_sentiment = sentiments.get(ticker)
        signal_presse = "buy" if avg_sentiment is not None and avg_sentiment > 0.05 else (
                         "sell" if avg_sentiment is not None and avg_sentiment < -0.05 else "hold")

        # Signal fondamental
        fundamentals = get_fundamentals(ticker)
        per = fundamentals["per"]
        roe = fundamentals["roe"]
        de = fundamentals["de"]

        signal_fondamental = "hold"
        if per is not None and roe is not None:
            if per < per_thresh and roe > roe_thresh and (de is None or de < de_thresh * 100):
                signal_fondamental = "buy"
            elif per > per_thresh * 1.5 or (roe is not None and roe < roe_thresh / 2) or (de is not None and de > de_thresh * 150):
                signal_fondamental = "sell"

        # Emojis pour la visualisation
        emoji_tech = map_to_emoji(last_signal, is_tech=True)
        emoji_presse = map_to_emoji(signal_presse)
        emoji_fond = map_to_emoji(signal_fondamental)
        signal_final = emoji_tech + emoji_presse + emoji_fond

        # Cr√©ation de la ligne du tableau
        tableau.append({
            "Ticker": ticker,
            "Date": df_tail.index[-1].strftime('%Y-%m-%d') if not df_tail.empty else None,
            "Close (moy5j)": round(close_mean, 2) if not np.isnan(close_mean) else None,
            "SMA20 (moy5j)": round(sma20_mean, 2) if sma20_mean is not None and not np.isnan(sma20_mean) else None,
            "RSI (moy5j)": round(rsi_mean, 2) if rsi_mean is not None and not np.isnan(rsi_mean) else None,
            "MACD (moy5j)": round(macd_mean, 3) if macd_mean is not None and not np.isnan(macd_mean) else None,
            "Signal_Technique": last_signal,
            "Sentiment_Moyen": round(avg_sentiment, 2) if avg_sentiment is not None else None,
            "Signal_Presse": signal_presse,
            "PER": round(per, 2) if per is not None else None,
            "ROE": round(roe * 100, 2) if roe is not None else None,
            "D/E": round(de, 2) if de is not None else None,
            "Signal_Fondamental": signal_fondamental,
            "Signal_Final": signal_final
        })

    # Cr√©ation du DataFrame
    return pd.DataFrame(tableau)

# *** Partie 8: Visualisations ***

def plot_trading_strategy(df, ticker, window=60):
    """
    Cr√©e un graphique interactif avec Plotly pour la strat√©gie de trading
    """
    # Extraire une fen√™tre de donn√©es r√©centes
    recent_df = df.tail(window).copy()
    
    # Cr√©er la figure de base avec la courbe de prix
    fig = go.Figure()
    
    # Ajouter la courbe de prix
    fig.add_trace(go.Scatter(
        x=recent_df.index,
        y=recent_df['Close'],
        mode='lines',
        name='Prix',
        line=dict(color='royalblue', width=2)
    ))
    
    # Ajouter les SMA
    if 'SMA20' in recent_df.columns:
        fig.add_trace(go.Scatter(
            x=recent_df.index,
            y=recent_df['SMA20'],
            mode='lines',
            name='SMA20',
            line=dict(color='orange', width=1.5, dash='dot')
        ))
    
    if 'SMA50' in recent_df.columns:
        fig.add_trace(go.Scatter(
            x=recent_df.index,
            y=recent_df['SMA50'],
            mode='lines',
            name='SMA50',
            line=dict(color='red', width=1.5, dash='dot')
        ))
    
    # Ajouter les signaux d'achat (fl√®ches vertes)
    buy_signals = recent_df[recent_df['Signal'] == "long"]
    if not buy_signals.empty:
        fig.add_trace(go.Scatter(
            x=buy_signals.index,
            y=buy_signals['Close'],
            mode='markers',
            name='Signal achat',
            marker=dict(symbol='triangle-up', size=15, color='green')
        ))
    
    # Ajouter les signaux de vente (fl√®ches rouges)
    sell_signals = recent_df[recent_df['Signal'] == "short"]
    if not sell_signals.empty:
        fig.add_trace(go.Scatter(
            x=sell_signals.index,
            y=sell_signals['Close'],
            mode='markers',
            name='Signal vente',
            marker=dict(symbol='triangle-down', size=15, color='red')
        ))
    
    # Mise en forme du graphique
    fig.update_layout(
        title=f'Strat√©gie de trading pour {ticker}',
        xaxis_title='Date',
        yaxis_title='Prix',
        hovermode='x unified',
        legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1),
        height=500,
        template='plotly_white'
    )
    
    return fig

def plot_technical_indicators(df, ticker, window=60):
    """
    Cr√©e un graphique complet des indicateurs techniques
    """
    recent_df = df.tail(window).copy()
    
    # Cr√©er la figure avec des sous-graphiques
    fig = go.Figure()
    fig = make_subplots(rows=4, cols=1, 
                       shared_xaxes=True, 
                       vertical_spacing=0.05,
                       row_heights=[0.5, 0.15, 0.15, 0.2],
                       subplot_titles=('Prix', 'MACD', 'RSI', 'Volume'))
    
    # Graphique des prix
    fig.add_trace(go.Scatter(
        x=recent_df.index, y=recent_df['Close'], name='Prix',
        line=dict(color='royalblue')
    ), row=1, col=1)
    
    # Ajouter SMA
    fig.add_trace(go.Scatter(
        x=recent_df.index, y=recent_df['SMA20'], name='SMA20',
        line=dict(color='orange', dash='dot')
    ), row=1, col=1)
    
    if 'SMA50' in recent_df.columns:
        fig.add_trace(go.Scatter(
            x=recent_df.index, y=recent_df['SMA50'], name='SMA50',
            line=dict(color='red', dash='dot')
        ), row=1, col=1)
    
    # Ajouter les Bandes de Bollinger si disponibles
    if all(x in recent_df.columns for x in ['Bollinger_Upper', 'Bollinger_Lower']):
        fig.add_trace(go.Scatter(
            x=recent_df.index, y=recent_df['Bollinger_Upper'], name='Boll Upper',
            line=dict(color='rgba(250,174,50,0.4)'), showlegend=True
        ), row=1, col=1)
        
        fig.add_trace(go.Scatter(
            x=recent_df.index, y=recent_df['Bollinger_Lower'], name='Boll Lower',
            line=dict(color='rgba(250,174,50,0.4)'), 
            fill='tonexty', fillcolor='rgba(250,174,50,0.1)', showlegend=True
        ), row=1, col=1)
    
    # MACD
    if all(x in recent_df.columns for x in ['MACD', 'Signal_Line']):
        fig.add_trace(go.Scatter(
            x=recent_df.index, y=recent_df['MACD'], name='MACD',
            line=dict(color='blue')
        ), row=2, col=1)
        
        fig.add_trace(go.Scatter(
            x=recent_df.index, y=recent_df['Signal_Line'], name='Signal Line',
            line=dict(color='red')
        ), row=2, col=1)
        
        # Histogramme MACD
        if 'MACD_Histogram' in recent_df.columns:
            colors = ['green' if val >= 0 else 'red' for val in recent_df['MACD_Histogram']]
            fig.add_trace(go.Bar(
                x=recent_df.index, y=recent_df['MACD_Histogram'], name='Histogram',
                marker_color=colors
            ), row=2, col=1)
    
    # RSI
    if 'RSI' in recent_df.columns:
        fig.add_trace(go.Scatter(
            x=recent_df.index, y=recent_df['RSI'], name='RSI',
            line=dict(color='purple')
        ), row=3, col=1)
        
        # Lignes de survente/surachat
        fig.add_trace(go.Scatter(
            x=recent_df.index, y=[70] * len(recent_df), name='Surachat',
            line=dict(color='red', dash='dash'), showlegend=False
        ), row=3, col=1)
        
        fig.add_trace(go.Scatter(
            x=recent_df.index, y=[30] * len(recent_df), name='Survente',
            line=dict(color='green', dash='dash'), showlegend=False
        ), row=3, col=1)
    
    # Volume
    fig.add_trace(go.Bar(
        x=recent_df.index, y=recent_df['Volume'], name='Volume',
        marker_color='rgba(0,0,250,0.3)'
    ), row=4, col=1)
    
    # Mise en page
    fig.update_layout(
        title=f'Analyse technique pour {ticker}',
        height=800,
        showlegend=True,
        legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1),
        template='plotly_white'
    )
    
    # Mettre √† jour les axes y
    fig.update_yaxes(title_text='Prix', row=1, col=1)
    fig.update_yaxes(title_text='MACD', row=2, col=1)
    fig.update_yaxes(title_text='RSI', range=[0, 100], row=3, col=1)
    fig.update_yaxes(title_text='Volume', row=4, col=1)
    
    return fig

def visualiser_strategie(df, ticker):
    """
    Visualisation matplotlib de la courbe de prix avec les signaux d'achat et de vente
    """
    plt.figure(figsize=(12, 6))
    
    # Tracer la courbe de prix
    plt.plot(df['Close'], label='Prix de cl√¥ture', color='blue', lw=2)
    
    # Tracer la SMA20
    plt.plot(df['SMA20'], label='SMA20', color='orange', linestyle='--', lw=2)
    
    # Tracer les points d'achat (fl√®ches vertes)
    achat = df[df['Signal'] == "long"]
    if not achat.empty:
        plt.scatter(achat.index, achat['Close'], marker='^', color='green', s=100, label='Point d\'achat', zorder=5)
    
    # Tracer les points de vente (fl√®ches rouges)
    vente = df[df['Signal'] == "short"]
    if not vente.empty:
        plt.scatter(vente.index, vente['Close'], marker='v', color='red', s=100, label='Point de vente', zorder=5)
    
    # Ajouter des titres et labels
    plt.title(f"Strat√©gie de trading pour {ticker}", fontsize=16)
    plt.xlabel('Date', fontsize=12)
    plt.ylabel('Prix', fontsize=12)
    plt.legend(loc='best')
    
    # Rotation des labels de l'axe x
    plt.xticks(rotation=45)
    
    # Afficher le graphique
    plt.tight_layout()
    
    return plt

def stats_strategie(df):
    """
    Calcule les statistiques de la strat√©gie
    """
    stats = {}
    
    # V√©rifier si les colonnes n√©cessaires existent
    if 'Return_5d' not in df.columns:
        df = evaluate_signals(df)
        
    if 'Cumulative_Strategy_Return' not in df.columns:
        df = backtest_signals(df)
    
    # Retour cumul√© de la strat√©gie
    stats['Retour Cumul√©'] = df['Cumulative_Strategy_Return'].iloc[-1] if not df.empty else None
    
    # Calcul du nombre de trades gagnants et perdants
    try:
        trades_gagnants = len(df[df['Signal'] == "long"][df['Return_5d'] > 0])
        trades_perdants = len(df[df['Signal'] == "short"][df['Return_5d'] < 0])
        
        stats['Trades gagnants'] = trades_gagnants
        stats['Trades perdants'] = trades_perdants
        stats['Taux de gain'] = trades_gagnants / (trades_gagnants + trades_perdants) if trades_gagnants + trades_perdants > 0 else 0
        
        # Return des derniers trades
        stats['Dernier retour'] = df['Return_5d'].iloc[-1] if not df.empty else None
    except Exception as e:
        st.warning(f"Erreur lors du calcul des statistiques: {str(e)}")
    
    return stats

# *** Partie 9: Mode d'Emploi (NOUVELLE FONCTION) ***

def create_user_guide():
    """
    Cr√©e la section Mode d'Emploi avec des explications d√©taill√©es sur l'utilisation de l'application
    """
    st.title("üìò Mode d'Emploi - Strat√©gie de Trading Multi-Facteurs")
    
    # Cr√©ation d'un syst√®me d'onglets pour organiser les diff√©rentes parties du guide
    guide_tabs = st.tabs([
        "Introduction", 
        "Concepts de base", 
        "Indicateurs techniques",
        "Analyse des actualit√©s",
        "Analyse fondamentale",
        "Signaux de trading",
        "Backtest",
        "Graphiques",
        "Gestion des risques",
        "FAQ & Glossaire"
    ])
    
    # Tab 1: Introduction
    with guide_tabs[0]:
        st.header("Introduction")
        st.markdown("""
        Ce guide est destin√© √† vous aider √† comprendre et √† utiliser efficacement l'application de Strat√©gie de Trading Multi-Facteurs, 
        m√™me si vous n'avez pas d'exp√©rience pr√©alable en trading. Il explique les concepts cl√©s, les indicateurs techniques et comment 
        interpr√©ter les r√©sultats pour prendre des d√©cisions d'investissement plus √©clair√©es.
        
        Utilisez les onglets ci-dessus pour naviguer entre les diff√©rentes sections du guide.
        """)
    
    # Tab 2: Concepts de base du trading
    with guide_tabs[1]:
        st.header("Concepts de base du trading")
        
        st.subheader("Les positions longues et courtes")
        col1, col2 = st.columns(2)
        with col1:
            st.info("**Position longue (long)** : Acheter une action en esp√©rant que son prix augmente. C'est la forme d'investissement la plus courante.")
        with col2:
            st.info("**Position courte (short)** : Parier sur la baisse du prix d'une action. Techniquement, vous empruntez des actions pour les vendre imm√©diatement, puis les racheter plus tard √† un prix inf√©rieur.")
        
        st.subheader("Tendances du march√©")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.success("**March√© haussier (bullish)** : P√©riode o√π les prix des actifs augmentent g√©n√©ralement.")
        with col2:
            st.error("**March√© baissier (bearish)** : P√©riode o√π les prix des actifs diminuent g√©n√©ralement.")
        with col3:
            st.warning("**March√© lat√©ral (sideways)** : P√©riode o√π les prix fluctuent dans une fourchette sans tendance claire.")
        
        st.subheader("P√©riodes d'analyse")
        st.markdown("""
        L'application permet de s√©lectionner diff√©rentes p√©riodes d'analyse :
        - **1mo** : 1 mois
        - **3mo** : 3 mois
        - **6mo** : 6 mois
        - **1y** : 1 an
        - **2y** : 2 ans
        
        Choisissez une p√©riode plus courte pour une analyse √† court terme et une p√©riode plus longue pour identifier les tendances de fond.
        """)
    
    # Tab 3: Indicateurs techniques
    with guide_tabs[2]:
        st.header("Comprendre les indicateurs techniques")
        
        # Moyennes Mobiles Simples (SMA)
        st.subheader("Moyennes Mobiles Simples (SMA)")
        st.markdown("""
        Les moyennes mobiles aident √† identifier la tendance g√©n√©rale en lissant les fluctuations de prix.
        
        - **SMA court terme (par d√©faut : 20 jours)** : Refl√®te la tendance r√©cente du prix.
        - **SMA long terme (par d√©faut : 50 jours)** : Refl√®te la tendance de fond.
        - **Interpr√©tation** : Lorsque la SMA court terme passe au-dessus de la SMA long terme, c'est souvent consid√©r√© comme un signal d'achat (croisement haussier). L'inverse est consid√©r√© comme un signal de vente (croisement baissier).
        """)
        
        # Cr√©ons une simple visualisation pour illustrer les SMA
        st.image("https://www.investopedia.com/thmb/TphjF_jEcn3W6PbQHwi3QUoIOXY=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/dotdash_Final_Moving_Average_Strategy_Sep_2020-01-a9654d6ca1f94cfb9c7963c3bd108f19.jpg", 
                 caption="Illustration des croisements de moyennes mobiles (source: Investopedia)")
        
        # RSI
        st.subheader("Indice de Force Relative (RSI)")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.error("**RSI > 70** : Surachet√© (signal potentiel de vente)")
        with col2:
            st.success("**RSI < 30** : Survendu (signal potentiel d'achat)")
        with col3:
            st.warning("**RSI entre 30 et 70** : Zone neutre")
        
        # MACD
        st.subheader("MACD (Moving Average Convergence Divergence)")
        st.markdown("""
        Le MACD est un indicateur de tendance qui montre la relation entre deux moyennes mobiles exponentielles.
        
        - **MACD > Signal Line** : Signal d'achat potentiel.
        - **MACD < Signal Line** : Signal de vente potentiel.
        - **Histogramme MACD** : Repr√©sente la diff√©rence entre le MACD et la ligne de signal. Les barres vertes indiquent une tendance haussi√®re, les rouges une tendance baissi√®re.
        """)
        
        # Bandes de Bollinger
        st.subheader("Bandes de Bollinger")
        st.markdown("""
        Les bandes de Bollinger utilisent l'√©cart-type pour cr√©er une enveloppe autour du prix.
        
        - **Prix proche de la bande sup√©rieure** : Potentiellement surachet√©.
        - **Prix proche de la bande inf√©rieure** : Potentiellement survendu.
        - **R√©tr√©cissement des bandes** : Indique une faible volatilit√©, souvent avant un mouvement significatif du prix.
        - **√âlargissement des bandes** : Indique une augmentation de la volatilit√©.
        """)
        
        # Stochastique
        st.subheader("Stochastique")
        st.markdown("""
        L'oscillateur stochastique compare le prix de cl√¥ture actuel √† une fourchette de prix sur une p√©riode donn√©e.
        
        - **Stochastique K < 20 et en hausse** : Signal d'achat potentiel.
        - **Stochastique K > 80 et en baisse** : Signal de vente potentiel.
        """)
        
        # ATR
        st.subheader("ATR (Average True Range)")
        st.markdown("""
        L'ATR mesure la volatilit√© du march√©.
        
        - **ATR √©lev√©** : Forte volatilit√©.
        - **ATR faible** : Faible volatilit√©.
        - **Application** : Utilis√© dans notre application pour calculer les stop loss et la taille des positions.
        """)
    
    # Tab 4: Analyse des actualit√©s
    with guide_tabs[3]:
        st.header("Analyse des actualit√©s et sentiment")
        
        st.subheader("Score de sentiment")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.success("**Score > 0.2** : Sentiment positif, signal d'achat potentiel")
        with col2:
            st.error("**Score < -0.2** : Sentiment n√©gatif, signal de vente potentiel")
        with col3:
            st.warning("**Score entre -0.2 et 0.2** : Sentiment neutre")
        
        st.subheader("Interpr√©tation des actualit√©s")
        st.markdown("""
        Les actualit√©s sont list√©es avec leur score de sentiment correspondant (vert pour positif, rouge pour n√©gatif). 
        
        Exemples d'actualit√©s et leur interpr√©tation:
        
        üü¢ **"AAPL d√©passe les attentes pour le T3"** [0.45] : Tr√®s positif, pourrait soutenir une hausse du prix
        
        üü° **"Nouveau produit lanc√© par MSFT avec des projections mod√©r√©es"** [0.12] : L√©g√®rement positif, impact limit√©
        
        üî¥ **"TSLA rappelle 20 000 v√©hicules pour d√©faut critique"** [-0.62] : Tr√®s n√©gatif, risque de baisse du prix
        
        Utilisez ces informations pour comprendre les facteurs pouvant influencer le prix √† court terme.
        """)
        
        st.subheader("Comment le sentiment est calcul√©")
        st.markdown("""
        Notre application utilise l'analyse de sentiment VADER (Valence Aware Dictionary and sEntiment Reasoner), une m√©thode sp√©cialement con√ßue pour analyser le sentiment des textes sur les m√©dias sociaux et les actualit√©s financi√®res.
        
        Le processus comprend:
        1. R√©cup√©ration des actualit√©s r√©centes via l'API Finnhub
        2. Analyse du titre et de la description de chaque article
        3. Calcul d'un score composite (70% pour le titre, 30% pour la description)
        4. Moyenne des scores pour obtenir un sentiment global
        """)
    
    # Tab 5: Analyse fondamentale
    with guide_tabs[4]:
        st.header("Analyse fondamentale")
        
        # PER
        st.subheader("PER (Price-to-Earnings Ratio)")
        col1, col2 = st.columns(2)
        with col1:
            st.success("**PER bas (< 25)** : Potentiellement sous-√©valu√©")
        with col2:
            st.error("**PER √©lev√© (> 25)** : Potentiellement sur√©valu√©")
        
        st.markdown("""
        Le PER compare le prix de l'action aux b√©n√©fices par action. Il indique combien les investisseurs sont pr√™ts √† payer pour chaque dollar de b√©n√©fice.
        
        **Interpr√©tation** : Un PER bas peut √™tre un signal d'achat, mais doit √™tre compar√© √† la moyenne du secteur. Par exemple, les entreprises technologiques ont tendance √† avoir des PER plus √©lev√©s que les banques.
        """)
        
        # ROE
        st.subheader("ROE (Return on Equity)")
        col1, col2 = st.columns(2)
        with col1:
            st.success("**ROE √©lev√© (> 10%)** : Bonne rentabilit√©")
        with col2:
            st.error("**ROE faible (< 10%)** : Rentabilit√© potentiellement probl√©matique")
        
        st.markdown("""
        Le ROE mesure la rentabilit√© d'une entreprise par rapport √† ses capitaux propres. Il indique l'efficacit√© avec laquelle une entreprise utilise ses fonds propres pour g√©n√©rer des b√©n√©fices.
        
        **Interpr√©tation** : Un ROE √©lev√© est g√©n√©ralement un bon signe pour l'entreprise, indiquant une bonne efficacit√© op√©rationnelle.
        """)
        
        # Ratio Dette/Capitaux propres
        st.subheader("Ratio Dette/Capitaux propres (D/E)")
        col1, col2 = st.columns(2)
        with col1:
            st.success("**D/E < 1.5** : Niveau d'endettement raisonnable")
        with col2:
            st.error("**D/E > 1.5** : Niveau d'endettement potentiellement √©lev√©")
        
        st.markdown("""
        Le ratio D/E mesure le niveau d'endettement d'une entreprise par rapport √† ses capitaux propres. Il indique la proportion de financement provenant de la dette par rapport aux capitaux propres.
        
        **Interpr√©tation** : Un ratio D/E √©lev√© peut indiquer un risque financier plus important, surtout en p√©riode de taux d'int√©r√™t √©lev√©s ou de ralentissement √©conomique.
        """)
    
    # Tab 6: Signaux de trading
    with guide_tabs[5]:
        st.header("Signaux de trading et leur interpr√©tation")
        
        st.subheader("Types de signaux")
        st.markdown("""
        L'application g√©n√®re plusieurs types de signaux bas√©s sur diff√©rentes analyses :
        
        - **Signal technique** : Bas√© uniquement sur les indicateurs techniques.
        - **Signal d'actualit√©s** : Bas√© sur l'analyse du sentiment des actualit√©s r√©centes.
        - **Signal fondamental** : Bas√© sur les ratios financiers de l'entreprise.
        - **Signal macro** : Bas√© sur des indicateurs macro√©conomiques comme le VIX et le S&P 500.
        """)
        
        st.subheader("Signal final")
        st.markdown("""
        Le signal final combine les signaux individuels :
        """)
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown("**üü¢üü¢üü¢ strong_buy** : Tous les signaux sont positifs")
            st.markdown("**üü¢ long/buy** : Signal d'achat")
        with col2:
            st.markdown("**üü° hold** : Signal neutre")
        with col3:
            st.markdown("**üî¥ short/sell** : Signal de vente")
            st.markdown("**üî¥üî¥üî¥ strong_sell** : Tous les signaux sont n√©gatifs")
        
        st.subheader("Tableau de bord")
        st.markdown("""
        Le tableau de bord pr√©sente une vue synth√©tique de plusieurs actifs avec leurs indicateurs cl√©s et signaux. 
        
        Les √©mojis color√©s (üü¢üü°üî¥) permettent de visualiser rapidement les signaux pour chaque facteur d'analyse:
        - Premier emoji : Signal technique
        - Deuxi√®me emoji : Signal bas√© sur les actualit√©s
        - Troisi√®me emoji : Signal fondamental
        
        Exemple: üü¢üü°üî¥ signifie technique positif, actualit√©s neutres, fondamentaux n√©gatifs.
        """)
        
        st.subheader("Exemple d'interpr√©tation")
        st.markdown("""
        Voici comment interpr√©ter les diff√©rentes combinaisons de signaux :
        
        **üü¢üü¢üü¢ (strong_buy)** : Tous les facteurs sont align√©s positivement. C'est g√©n√©ralement le moment id√©al pour √©tablir une position longue avec une taille de position plus importante.
        
        **üü¢üü¢üü° ou üü¢üü°üü¢** : Deux facteurs positifs, un neutre. Signal d'achat avec une confiance mod√©r√©e.
        
        **üü¢üî¥üü°** : Signaux contradictoires. Le signal technique est positif, mais les actualit√©s sont n√©gatives. Dans ce cas, consid√©rez d'autres facteurs ou attendez une meilleure configuration.
        
        **üî¥üî¥üî¥ (strong_sell)** : Tous les facteurs sont align√©s n√©gativement. Bon candidat pour une position courte ou pour vendre des positions existantes.
        """)
    
    # Tab 7: Backtest
    with guide_tabs[6]:
        st.header("Comprendre le backtest")
        
        st.subheader("Qu'est-ce qu'un backtest ?")
        st.markdown("""
        Un backtest est une simulation qui applique votre strat√©gie de trading √† des donn√©es historiques pour voir comment elle aurait perform√© dans le pass√©. C'est un outil essentiel pour √©valuer l'efficacit√© d'une strat√©gie avant de l'appliquer avec de l'argent r√©el.
        """)
        
        st.subheader("M√©triques cl√©s du backtest")
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("""
            - **Retour Cumul√©** : Performance totale de la strat√©gie sur la p√©riode test√©e.
            - **Taux de r√©ussite** : Pourcentage de trades gagnants.
            - **Alpha** : Diff√©rence entre le retour de la strat√©gie et celui du march√© (Buy & Hold).
            """)
        with col2:
            st.markdown("""
            - **Nombre de signaux** : Combien de trades la strat√©gie a g√©n√©r√©.
            - **Ratio gain/perte** : Rapport entre le gain moyen des trades gagnants et la perte moyenne des trades perdants.
            - **Drawdown maximum** : Perte maximale subie pendant la p√©riode de test.
            """)
        
        st.subheader("Optimisation des param√®tres")
        st.markdown("""
        L'onglet Backtest permet de tester diff√©rentes combinaisons de param√®tres pour trouver ceux qui auraient g√©n√©r√© les meilleurs r√©sultats historiques.
        
        - **Meilleure combinaison** : Celle qui maximise l'alpha tout en maintenant un drawdown acceptable.
        - **Attention** : L'optimisation excessive peut mener au "curve fitting", o√π les param√®tres sont trop adapt√©s aux donn√©es pass√©es et peuvent mal performer sur des donn√©es futures.
        
        ‚ö†Ô∏è **Important** : Les performances pass√©es ne garantissent pas les r√©sultats futurs. Utilisez les backtests comme un guide, pas comme une garantie.
        """)
        
        st.subheader("Comment utiliser l'onglet Backtest")
        st.markdown("""
        1. Entrez le ticker que vous souhaitez tester
        2. S√©lectionnez la p√©riode de backtest (plus longue pour des r√©sultats plus robustes)
        3. S√©lectionnez les param√®tres √† tester (SMA court, SMA long, RSI)
        4. D√©finissez les plages de valeurs √† tester pour chaque param√®tre
        5. Cliquez sur "Lancer le backtest"
        6. Analysez les r√©sultats et identifiez les param√®tres optimaux
        7. Faites attention aux combinaisons qui donnent de bons r√©sultats sur diff√©rentes p√©riodes
        """)
    
    # Tab 8: Graphiques
    with guide_tabs[7]:
        st.header("Guide des graphiques")
        
        st.subheader("Graphique de prix et signaux")
        st.markdown("""
        - **Ligne bleue** : Prix de cl√¥ture.
        - **Lignes pointill√©es** : Moyennes mobiles (orange pour court terme, rouge pour long terme).
        - **Triangles verts** : Signaux d'achat.
        - **Triangles rouges** : Signaux de vente.
        - **Zone color√©e** (si pr√©sente) : Bandes de Bollinger.
        """)
        
        st.subheader("Graphique des indicateurs techniques")
        st.markdown("""
        - **Panneau sup√©rieur** : Prix avec moyennes mobiles et bandes de Bollinger.
        - **Deuxi√®me panneau** : MACD et ligne de signal, avec histogramme.
        - **Troisi√®me panneau** : RSI avec lignes de survente/surachat √† 30 et 70.
        - **Panneau inf√©rieur** : Volume de transactions.
        """)
        
        st.subheader("Graphique de performance cumul√©e")
        st.markdown("""
        - **Ligne verte** : Performance de la strat√©gie.
        - **Ligne grise pointill√©e** : Performance du Buy & Hold (r√©f√©rence du march√©).
        
        Ce graphique vous permet de comparer visuellement la performance de votre strat√©gie par rapport √† une simple strat√©gie d'achat et de conservation.
        """)
        
        st.subheader("Comment interpr√©ter les divergences")
        st.markdown("""
        Les divergences entre le prix et les indicateurs peuvent fournir des signaux puissants:
        
        - **Divergence bullish** : Le prix fait un nouveau plus bas, mais l'indicateur (RSI ou MACD) ne confirme pas ce plus bas. Potentiel signal de retournement √† la hausse.
        
        - **Divergence bearish** : Le prix fait un nouveau plus haut, mais l'indicateur ne confirme pas ce plus haut. Potentiel signal de retournement √† la baisse.
        
        Cherchez ces sch√©mas sur les graphiques pour des opportunit√©s de trading suppl√©mentaires.
        """)
    
    # Tab 9: Gestion des risques
    with guide_tabs[8]:
        st.header("Gestion des risques")
        
        st.subheader("Taille de position")
        st.markdown("""
        L'application calcule la taille de position optimale bas√©e sur :
        - **Capital disponible** : Montant total √† investir.
        - **Pourcentage de risque** : Pourcentage du capital que vous √™tes pr√™t √† risquer sur chaque trade.
        - **Stop Loss** : Niveau de prix auquel vous fermeriez une position perdante pour limiter les pertes.
        
        **Formule simplifi√©e** :  
        Nombre d'actions = (Capital √ó % risque) √∑ Distance au stop loss par action
        
        Par exemple, avec 10 000‚Ç¨ de capital, 1% de risque et un stop loss √† 2‚Ç¨ sous le prix d'entr√©e, vous ach√®teriez 50 actions (10 000‚Ç¨ √ó 1% √∑ 2‚Ç¨ = 50).
        """)
        
        st.subheader("Stop Loss bas√© sur l'ATR")
        st.markdown("""
        Le stop loss est calcul√© en utilisant l'ATR pour s'adapter √† la volatilit√© du march√© :
        - **Pour les positions longues** : Prix d'entr√©e moins 2 √ó ATR.
        - **Pour les positions courtes** : Prix d'entr√©e plus 2 √ó ATR.
        
        Cette m√©thode est plus sophistiqu√©e qu'un stop loss fixe car elle tient compte de la volatilit√© de l'actif. Un actif plus volatil aura un stop loss plus √©loign√©.
        """)
        
        st.subheader("R√®gles de gestion des risques recommand√©es")
        st.markdown("""
        1. **Ne risquez jamais plus de 1-2% du capital sur un seul trade**
        2. **Diversifiez vos positions** (utilisez le tableau de bord multi-tickers)
        3. **Respectez toujours vos stop loss**
        4. **Prenez des profits partiels** lorsque les objectifs de prix sont atteints
        5. **Gardez une r√©serve de liquidit√©s** pour les opportunit√©s futures
        6. **√âvitez de trader pendant les annonces majeures** (r√©sultats trimestriels, d√©cisions de taux d'int√©r√™t, etc.)
        7. **Documentez vos trades** pour apprendre de vos erreurs et succ√®s
        
        ‚ö†Ô∏è **Important** : Aucune strat√©gie n'est parfaite. M√™me avec la meilleure gestion des risques, des pertes sont in√©vitables. L'objectif est de s'assurer que les gains des trades gagnants d√©passent les pertes des trades perdants sur le long terme.
        """)
    
    # Tab 10: FAQ & Glossaire
    with guide_tabs[9]:
        st.header("FAQ & Glossaire")
        
        st.subheader("Foire Aux Questions")
        
        with st.expander("Que signifie 'tenir compte du contexte macro' ?"):
            st.markdown("""
            Le contexte macro√©conomique fait r√©f√©rence aux conditions √©conomiques globales qui peuvent influencer tous les march√©s. 
            
            Notre application analyse des indicateurs comme le VIX (indice de volatilit√©) et les tendances du S&P 500 pour √©valuer le sentiment g√©n√©ral du march√©.
            
            En p√©riode de forte volatilit√© (VIX √©lev√©) ou de tendance baissi√®re du march√© global, m√™me les actions techniquement solides peuvent sous-performer.
            """)
        
        with st.expander("Comment interpr√©ter des signaux contradictoires ?"):
            st.markdown("""
            Des signaux contradictoires sont courants (par exemple, signal technique positif mais fondamentaux n√©gatifs). Dans ce cas :
            - Si vous √™tes un trader √† court terme, privil√©giez les signaux techniques et les actualit√©s.
            - Si vous √™tes un investisseur √† long terme, donnez plus de poids aux fondamentaux.
            
            L'application neutralise automatiquement le signal final en cas de contradiction majeure.
            """)
        
        with st.expander("Quelle est la diff√©rence entre un signal 'long' et 'strong_buy' ?"):
            st.markdown("""
            - Un signal **long** est g√©n√©ralement bas√© uniquement sur l'analyse technique.
            - Un signal **strong_buy** indique que tous les facteurs (technique, actualit√©s, fondamentaux, macro) sont align√©s positivement.
            
            Un **strong_buy** offre g√©n√©ralement une meilleure probabilit√© de succ√®s et pourrait justifier une position plus importante.
            """)
        
        with st.expander("Comment choisir la p√©riode d'analyse ?"):
            st.markdown("""
            - Pour le day trading ou swing trading √† court terme : 1mo ou 3mo.
            - Pour les investissements √† moyen terme : 6mo ou 1y.
            - Pour l'analyse des tendances longues : 1y ou 2y.
            
            Adaptez la p√©riode √† votre horizon d'investissement personnel.
            """)
        
        with st.expander("Est-ce que les performances pass√©es garantissent les r√©sultats futurs ?"):
            st.markdown("""
            Non. Les backtests sont utiles pour √©valuer une strat√©gie, mais les march√©s √©voluent constamment. 
            
            Utilisez les r√©sultats comme une indication, pas comme une garantie. Les conditions de march√© changent, et une strat√©gie qui a bien fonctionn√© par le pass√© peut moins bien fonctionner √† l'avenir.
            """)
        
        with st.expander("Que faire si l'API ne r√©cup√®re pas les actualit√©s ?"):
            st.markdown("""
            L'application utilise des donn√©es simul√©es lorsque l'API est indisponible. 
            
            Ces donn√©es servent √† illustrer la fonctionnalit√© mais ne doivent pas √™tre utilis√©es pour prendre des d√©cisions r√©elles. 
            
            Vous verrez un avertissement lorsque des donn√©es simul√©es sont utilis√©es.
            """)
        
        st.subheader("Glossaire des termes de trading")
        
        glossary = {
            "Alpha": "Performance suppl√©mentaire d'un investissement par rapport √† un indice de r√©f√©rence.",
            "Beta": "Mesure de la volatilit√© d'un actif par rapport au march√©.",
            "Drawdown": "Baisse en pourcentage depuis un sommet jusqu'√† un creux avant d'atteindre un nouveau sommet.",
            "Momentum": "Vitesse √† laquelle le prix d'un actif change.",
            "Volatilit√©": "Amplitude des variations de prix d'un actif sur une p√©riode donn√©e.",
            "Volume": "Nombre d'unit√©s d'un actif √©chang√©es pendant une p√©riode sp√©cifique.",
            "Capitalisation boursi√®re": "Valeur totale des actions en circulation d'une entreprise.",
            "Dividende": "Partie des b√©n√©fices d'une entreprise vers√©e aux actionnaires.",
            "Support": "Niveau de prix o√π la demande est suffisamment forte pour emp√™cher le prix de baisser davantage.",
            "R√©sistance": "Niveau de prix o√π l'offre est suffisamment forte pour emp√™cher le prix de monter davantage.",
            "Gap": "√âcart entre le prix de cl√¥ture d'une journ√©e et le prix d'ouverture de la journ√©e suivante.",
            "Breakout": "Mouvement de prix qui d√©passe un niveau de support ou de r√©sistance √©tabli.",
            "Retracement": "Mouvement temporaire dans la direction oppos√©e √† la tendance principale.",
            "Double Top/Bottom": "Formation graphique en forme de M (double sommet) ou W (double creux) indiquant un potentiel renversement de tendance."
        }
        
        # Afficher le glossaire sous forme de tableau
        glossary_df = pd.DataFrame({"Terme": glossary.keys(), "D√©finition": glossary.values()})
        st.dataframe(glossary_df, use_container_width=True)

# *** Partie 10: Application Streamlit ***

def create_streamlit_app():
    # Titre et introduction
    st.title("üìä Strat√©gie de Trading Multi-Facteurs")
    
    # Dans la section sidebar pour les param√®tres
    st.sidebar.header("‚öôÔ∏è Param√®tres")
    
    # Input pour le ticker individuel
    ticker_input = st.sidebar.text_input("Ticker", "AAPL").upper()
    
    # D√©finir la liste des tickers par d√©faut
    default_tickers = ["AAPL", "MSFT", "GOOGL", "AMZN", "TSLA"]
    predefined_tickers = ["AAPL", "MSFT", "GOOGL", "AMZN", "META", "TSLA", "NVDA", "NFLX", "DIS", "JPM", "BA", "KO", "PEP", "WMT", "V", "MA"]
    
    # Ajouter un champ pour permettre aux utilisateurs d'ajouter leur propre ticker
    new_ticker = st.sidebar.text_input("Ajouter un nouveau ticker").upper()
    add_ticker_button = st.sidebar.button("Ajouter au tableau de bord")
    
    # Cr√©er une liste personnalis√©e en session
    if 'custom_tickers' not in st.session_state:
        st.session_state.custom_tickers = predefined_tickers.copy()
    
    # Ajouter le nouveau ticker √† la liste si demand√©
    if add_ticker_button and new_ticker and new_ticker not in st.session_state.custom_tickers:
        st.session_state.custom_tickers.append(new_ticker)
        st.sidebar.success(f"Ticker {new_ticker} ajout√© avec succ√®s!")
    
    # S√©lection multiple pour les tickers (tableau de bord)
    selected_tickers = st.sidebar.multiselect(
        "Tickers pour le tableau de bord",
        options=st.session_state.custom_tickers,
        default=default_tickers
    )
    
    # Bouton pour r√©initialiser la liste des tickers personnalis√©s
    if st.sidebar.button("R√©initialiser la liste des tickers"):
        st.session_state.custom_tickers = predefined_tickers.copy()
        st.sidebar.info("Liste des tickers r√©initialis√©e.")
    
    # Param√®tres d'analyse
    st.sidebar.subheader("Param√®tres d'analyse")
    period = st.sidebar.selectbox("P√©riode d'analyse", ["1mo", "3mo", "6mo", "1y", "2y"], index=2)
    
    # Options avanc√©es dans un expander
    with st.sidebar.expander("Options avanc√©es"):
        sma_short = st.slider("SMA Court Terme", 5, 50, DEFAULT_SMA_SHORT)
        sma_long = st.slider("SMA Long Terme", 20, 200, DEFAULT_SMA_LONG)
        rsi_window = st.slider("Fen√™tre RSI", 7, 21, DEFAULT_RSI_WINDOW)
        sentiment_days = st.slider("Jours d'actualit√©s", 3, 14, SENTIMENT_DAYS)
        
        capital = st.number_input("Capital de trading (‚Ç¨)", min_value=1000, max_value=1000000, value=10000, step=1000)
        risk_pct = st.slider("% de risque par trade", 0.5, 5.0, 1.0, 0.5)
    
    # Navigation par onglets
    tabs = st.tabs(["Analyse individuelle", "Tableau de bord", "Backtest", "Mode d'Emploi", "√Ä propos"])
    
    # Onglet 1: Analyse individuelle
    with tabs[0]:
        col1, col2 = st.columns([1, 3])
        
        with col1:
            st.subheader("Analyse pour un ticker")
            ticker = st.text_input("Entrez un ticker", ticker_input)
            
            if st.button("Analyser", key="analyze_single"):
                # Conteneur pour les r√©sultats
                results_container = st.container()
                
                with st.spinner(f"Analyse en cours pour {ticker}..."):
                    # R√©cup√©ration et traitement des donn√©es
                    data = get_price_data(ticker, period=period)
                    
                    if data.empty:
                        st.error(f"Aucune donn√©e disponible pour {ticker}")
                    else:
                        # Traitement des donn√©es
                        data = add_sma(data, short=sma_short, long=sma_long)
                        data = compute_rsi(data, window=rsi_window)
                        data = compute_macd(data)
                        data = compute_bollinger_bands(data)
                        data = compute_atr(data)
                        data = generate_signals(data)
                        data = evaluate_signals(data)
                        
                        # R√©cup√©rer les actualit√©s et le sentiment
                        news_df = get_recent_news(ticker, days=sentiment_days)
                        sentiment_score = news_df["sentiment_score"].mean() if not news_df.empty else None
                        
                        # Donn√©es fondamentales
                        fundamentals = get_fundamentals(ticker)
                        fund_signal = "buy" if (
                            fundamentals["per"] is not None and 
                            fundamentals["per"] < PER_THRESHOLD and 
                            fundamentals["roe"] is not None and 
                            fundamentals["roe"] > ROE_THRESHOLD
                        ) else "sell" if (
                            fundamentals["per"] is not None and 
                            fundamentals["per"] > PER_THRESHOLD * 1.5 or 
                            fundamentals["roe"] is not None and 
                            fundamentals["roe"] < ROE_THRESHOLD / 2
                        ) else "hold"
                        
                        # Donn√©es macro
                        macro_data = get_macro_indicators()
                        macro_signal = get_macro_signal(macro_data)
                        
                        # G√©n√©ration du signal final
                        data = generate_final_signal(
                            data, 
                            ticker, 
                            {ticker: sentiment_score},
                            {'signal': fund_signal},
                            macro_signal
                        )
                        
                        # Backtest
                        data = backtest_signals(data)
                        backtest_stats = resume_backtest(data)
                        
                        # Calcul du sizing de position
                        position_info = calculate_position_size(data, ticker, capital=capital, risk_pct=risk_pct)
                        
                        # Affichage des r√©sultats
                        with results_container:
                            # Signal et r√©capitulatif
                            final_signal = data['Final_Signal'].iloc[-1]
                            signal_color = {
                                'long': 'green', 'short': 'red', 'hold': 'orange',
                                'strong_buy': 'darkgreen', 'strong_sell': 'darkred'
                            }.get(final_signal, 'blue')
                            
                            st.markdown(f"### Signal pour {ticker}: <span style='color:{signal_color}'>{final_signal.upper()}</span>", unsafe_allow_html=True)
                            
                            # Affichage des facteurs qui ont conduit au signal
                            factors_col1, factors_col2 = st.columns(2)
                            
                            with factors_col1:
                                st.markdown("#### Facteurs d'analyse")
                                st.markdown(f"üîπ **Technique**: {data['Tech_Signal'].iloc[-1]}")
                                st.markdown(f"üîπ **Actualit√©s**: {data['News_Signal'].iloc[-1]}")
                                st.markdown(f"üîπ **Fondamental**: {data['Fund_Signal'].iloc[-1]}")
                                st.markdown(f"üîπ **Macro**: {data['Macro_Signal'].iloc[-1]}")
                            
                            with factors_col2:
                                st.markdown("#### Indicateurs cl√©s")
                                st.markdown(f"üìà **Prix actuel**: ${data['Close'].iloc[-1]:.2f}")
                                st.markdown(f"üìä **RSI**: {data['RSI'].iloc[-1]:.1f}")
                                st.markdown(f"üì∞ **Sentiment**: {sentiment_score:.2f}" if sentiment_score is not None else "üì∞ **Sentiment**: N/A")
                                st.markdown(f"üíµ **PER**: {fundamentals['per']:.1f}" if fundamentals['per'] is not None else "üíµ **PER**: N/A")
                            
                            # Sizing de position
                            st.markdown("#### Position recommand√©e")
                            pos_col1, pos_col2 = st.columns(2)
                            
                            with pos_col1:
                                st.metric("Nombre d'actions", f"{position_info['num_shares']}", 
                                          f"‚Ç¨{position_info['position_cost']:.0f}")
                                
                            with pos_col2:
                                st.metric("Stop Loss", f"‚Ç¨{position_info['stop_loss_price']:.2f}", 
                                          f"{-position_info['stop_loss_pct']:.1f}%" if data['Signal'].iloc[-1] == "long" else f"{position_info['stop_loss_pct']:.1f}%")
                            
                            # Graphique de la strat√©gie
                            st.subheader("Strat√©gie de Trading")
                            fig = plot_trading_strategy(data, ticker)
                            st.plotly_chart(fig, use_container_width=True)
                            
                            # Indicateurs techniques
                            with st.expander("Indicateurs techniques d√©taill√©s"):
                                fig_tech = plot_technical_indicators(data, ticker)
                                st.plotly_chart(fig_tech, use_container_width=True)
                            
                            # R√©sultats du backtest
                            st.subheader("R√©sultats du Backtest")
                            if backtest_stats:
                                bt_col1, bt_col2, bt_col3 = st.columns(3)
                                
                                with bt_col1:
                                    success_rate_long = backtest_stats.get("success_rate_long")
                                    if success_rate_long is not None:
                                        st.metric("Succ√®s signaux Long", f"{success_rate_long:.1f}%", 
                                                 f"{backtest_stats.get('nb_longs')} signaux")
                                
                                with bt_col2:
                                    success_rate_short = backtest_stats.get("success_rate_short")
                                    if success_rate_short is not None:
                                        st.metric("Succ√®s signaux Short", f"{success_rate_short:.1f}%", 
                                                 f"{backtest_stats.get('nb_shorts')} signaux")
                                
                                with bt_col3:
                                    final_return = backtest_stats.get("final_return")
                                    market_return = backtest_stats.get("market_return")
                                    if final_return is not None and market_return is not None:
                                        alpha = final_return - market_return
                                        st.metric("Alpha", f"{alpha:.2%}", 
                                                 f"vs. {market_return:.2%} (Buy & Hold)")
                            
                            # Graphique des performances cumul√©es
                            if 'Cumulative_Strategy_Return' in data.columns:
                                st.subheader("Performance Cumul√©e")
                                perf_fig = go.Figure()
                                
                                perf_fig.add_trace(go.Scatter(
                                    x=data.index[-120:],
                                    y=data['Cumulative_Strategy_Return'][-120:] * 100,
                                    mode='lines',
                                    name='Strat√©gie',
                                    line=dict(color='green', width=2)
                                ))
                                
                                perf_fig.add_trace(go.Scatter(
                                    x=data.index[-120:],
                                    y=data['Cumulative_Market_Return'][-120:] * 100,
                                    mode='lines',
                                    name='Buy & Hold',
                                    line=dict(color='gray', width=1.5, dash='dot')
                                ))
                                
                                perf_fig.update_layout(
                                    title="Performance cumul√©e (%)",
                                    xaxis_title="Date",
                                    yaxis_title="Rendement (%)",
                                    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1),
                                    template='plotly_white'
                                )
                                
                                st.plotly_chart(perf_fig, use_container_width=True)
                            
                            # Afficher les actualit√©s r√©centes
                            if not news_df.empty:
                                st.subheader("Actualit√©s r√©centes")
                                for i, (_, row) in enumerate(news_df[:5].iterrows()):
                                    sentiment_color = "green" if row["sentiment_score"] > 0.05 else ("red" if row["sentiment_score"] < -0.05 else "gray")
                                    st.markdown(f"**{row['title']}** - <span style='color:{sentiment_color}'>[{row['sentiment_score']:.2f}]</span>", unsafe_allow_html=True)
                                    st.markdown(f"*{row['description'][:200]}...*")
                                    st.markdown(f"[Lien]({row['url']})")
                                    if i < 4:
                                        st.markdown("---")
        
        with col2:
            # Cette colonne est utilis√©e pour l'affichage des r√©sultats
            st.info("üëà Entrez un ticker et cliquez sur 'Analyser' pour voir les r√©sultats d√©taill√©s")

    # Onglet 2: Tableau de bord
    with tabs[1]:
        st.subheader("Tableau de bord multi-tickers")
        
        if st.button("G√©n√©rer le tableau de bord", key="generate_dashboard"):
            if not selected_tickers:
                st.warning("Veuillez s√©lectionner au moins un ticker dans la barre lat√©rale.")
            else:
                # Conteneur pour les r√©sultats
                dashboard_container = st.container()
                
                with st.spinner("G√©n√©ration du tableau de bord en cours..."):
                    # R√©cup√©ration et traitement des donn√©es pour tous les tickers
                    resultats = {}
                    sentiments = {}
                    
                    # Progress bar
                    progress_bar = st.progress(0)
                    
                    for i, ticker in enumerate(selected_tickers):
                        try:
                            # Actualiser la barre de progression
                            progress = (i + 1) / len(selected_tickers)
                            progress_bar.progress(progress)
                            
                            # R√©cup√©rer les actualit√©s
                            news_df = get_recent_news(ticker, days=sentiment_days)
                            if not news_df.empty:
                                sentiments[ticker] = news_df["sentiment_score"].mean()
                            else:
                                sentiments[ticker] = None
                            
                            # R√©cup√©rer et traiter les donn√©es
                            data = get_price_data(ticker, period=period)
                            if not data.empty:
                                data = add_sma(data, short=sma_short, long=sma_long)
                                data = compute_rsi(data, window=rsi_window)
                                data = compute_macd(data)
                                data = compute_bollinger_bands(data)
                                data = compute_atr(data)
                                data = generate_signals(data)
                                data = evaluate_signals(data)
                                resultats[ticker] = data
                        except Exception as e:
                            st.error(f"Erreur pour {ticker}: {str(e)}")
                    
                    # Supprimer la barre de progression
                    progress_bar.empty()
                    
                    # G√©n√©rer le tableau synth√©tique
                    tableau = tableau_synthetique(resultats, sentiments)
                    
                    # Afficher le tableau
                    with dashboard_container:
                        if not tableau.empty:
                            st.dataframe(tableau, use_container_width=True, height=400)
                            
                            # S√©lection d'un ticker pour affichage d√©taill√©
                            selected_ticker = st.selectbox("S√©lectionner un ticker pour d√©tails", tableau["Ticker"].tolist())
                            
                            if selected_ticker and selected_ticker in resultats:
                                with st.expander(f"D√©tails pour {selected_ticker}", expanded=True):
                                    col1, col2 = st.columns(2)
                                    
                                    with col1:
                                        # Graphique de trading
                                        fig = plot_trading_strategy(resultats[selected_ticker], selected_ticker)
                                        st.plotly_chart(fig, use_container_width=True)
                                    
                                    with col2:
                                        # Performance et backtest
                                        resultats[selected_ticker] = backtest_signals(resultats[selected_ticker])
                                        stats = stats_strategie(resultats[selected_ticker])
                                        
                                        st.subheader("Statistiques")
                                        stats_df = pd.DataFrame([{
                                            "Retour cumul√©": f"{stats['Retour Cumul√©']*100:.2f}%" if stats['Retour Cumul√©'] is not None else "N/A",
                                            "Taux de r√©ussite": f"{stats['Taux de gain']*100:.2f}%" if 'Taux de gain' in stats else "N/A",
                                            "Trades gagnants": stats.get('Trades gagnants', 'N/A'),
                                            "Trades perdants": stats.get('Trades perdants', 'N/A'),
                                            "Dernier retour": f"{stats['Dernier retour']*100:.2f}%" if stats.get('Dernier retour') is not None else "N/A"
                                        }])
                                        
                                        st.dataframe(stats_df.T, use_container_width=True)
                        else:
                            st.warning("Aucune donn√©e disponible pour g√©n√©rer le tableau de bord.")
    
    # Onglet 3: Backtest
    with tabs[2]:
        st.subheader("Backtest et optimisation")
        
        backtest_col1, backtest_col2 = st.columns([1, 2])
        
        with backtest_col1:
            backtest_ticker = st.text_input("Ticker pour backtest", ticker_input)
            backtest_period = st.selectbox("P√©riode de backtest", ["6mo", "1y", "2y", "5y", "10y"], index=1)
            
            # Param√®tres pour les tests
            st.subheader("Param√®tres √† tester")
            
            test_sma_short = st.checkbox("Tester SMA court terme", value=True)
            if test_sma_short:
                sma_short_min = st.number_input("SMA court min", 5, 30, 10, 5)
                sma_short_max = st.number_input("SMA court max", 15, 100, 30, 5)
                sma_short_step = st.number_input("SMA court pas", 1, 10, 5, 1)
            
            test_sma_long = st.checkbox("Tester SMA long terme", value=True)
            if test_sma_long:
                sma_long_min = st.number_input("SMA long min", 20, 100, 40, 10)
                sma_long_max = st.number_input("SMA long max", 50, 200, 100, 10)
                sma_long_step = st.number_input("SMA long pas", 5, 20, 10, 5)
            
            test_rsi = st.checkbox("Tester RSI", value=False)
            if test_rsi:
                rsi_min = st.number_input("RSI min", 5, 20, 10, 1)
                rsi_max = st.number_input("RSI max", 10, 30, 20, 1)
                rsi_step = st.number_input("RSI pas", 1, 5, 2, 1)
            
            if st.button("Lancer le backtest"):
                with st.spinner(f"Ex√©cution du backtest pour {backtest_ticker}..."):
                    # R√©cup√©ration des donn√©es
                    backtest_data = get_price_data(backtest_ticker, period=backtest_period)
                    
                    if backtest_data.empty:
                        st.error(f"Aucune donn√©e disponible pour {backtest_ticker}")
                    else:
                        # G√©n√©rer les combinaisons de param√®tres
                        param_combinations = []
                        
                        if test_sma_short:
                            sma_short_values = range(sma_short_min, sma_short_max + 1, sma_short_step)
                        else:
                            sma_short_values = [DEFAULT_SMA_SHORT]
                            
                        if test_sma_long:
                            sma_long_values = range(sma_long_min, sma_long_max + 1, sma_long_step)
                        else:
                            sma_long_values = [DEFAULT_SMA_LONG]
                            
                        if test_rsi:
                            rsi_values = range(rsi_min, rsi_max + 1, rsi_step)
                        else:
                            rsi_values = [DEFAULT_RSI_WINDOW]
                        
                        # Construire les combinaisons valides (SMA court < SMA long)
                        for short in sma_short_values:
                            for long in sma_long_values:
                                if short < long:  # Condition valide
                                    for rsi in rsi_values:
                                        param_combinations.append({
                                            'sma_short': short,
                                            'sma_long': long,
                                            'rsi': rsi
                                        })
                        
                        # Ex√©cuter le backtest pour chaque combinaison
                        results = []
                        
                        # Progress bar
                        progress_bar = st.progress(0)
                        total_combinations = len(param_combinations)
                        
                        for i, params in enumerate(param_combinations):
                            # Mise √† jour de la barre de progression
                            progress = (i + 1) / total_combinations
                            progress_bar.progress(progress)
                            
                            # Pr√©paration des donn√©es avec ces param√®tres
                            df_copy = backtest_data.copy()
                            df_copy = add_sma(df_copy, short=params['sma_short'], long=params['sma_long'])
                            df_copy = compute_rsi(df_copy, window=params['rsi'])
                            df_copy = compute_macd(df_copy)
                            df_copy = generate_signals(df_copy)
                            df_copy = evaluate_signals(df_copy)
                            df_copy = backtest_signals(df_copy)
                            
                            # Calcul des m√©triques de performance
                            if 'Cumulative_Strategy_Return' in df_copy.columns and len(df_copy) > 0:
                                strat_return = df_copy['Cumulative_Strategy_Return'].iloc[-1]
                                market_return = df_copy['Cumulative_Market_Return'].iloc[-1]
                                
                                # Nombre de signaux
                                nb_longs = len(df_copy[df_copy['Signal'] == "long"])
                                nb_shorts = len(df_copy[df_copy['Signal'] == "short"])
                                
                                # Taux de r√©ussite
                                win_longs = len(df_copy[(df_copy['Signal'] == "long") & (df_copy['Return_5d'] > 0)])
                                win_shorts = len(df_copy[(df_copy['Signal'] == "short") & (df_copy['Return_5d'] < 0)])
                                
                                success_rate_long = win_longs / nb_longs * 100 if nb_longs > 0 else 0
                                success_rate_short = win_shorts / nb_shorts * 100 if nb_shorts > 0 else 0
                                
                                # Drawdown maximum
                                cumul_returns = df_copy['Cumulative_Strategy_Return']
                                rolling_max = cumul_returns.cummax()
                                drawdown = (cumul_returns - rolling_max) / (1 + rolling_max)
                                max_drawdown = drawdown.min()
                                
                                # Ajouter aux r√©sultats
                                results.append({
                                    'SMA court': params['sma_short'],
                                    'SMA long': params['sma_long'],
                                    'RSI': params['rsi'],
                                    'Retour strat√©gie': strat_return * 100,  # en pourcentage
                                    'Retour march√©': market_return * 100,    # en pourcentage
                                    'Alpha': (strat_return - market_return) * 100,
                                    'Max Drawdown': max_drawdown * 100,
                                    'Nb signaux long': nb_longs,
                                    'Nb signaux short': nb_shorts,
                                    'Taux r√©ussite long': success_rate_long,
                                    'Taux r√©ussite short': success_rate_short
                                })
                        
                        # Convertir en DataFrame
                        results_df = pd.DataFrame(results)
                        
                        # Trier par performance (Alpha)
                        results_df = results_df.sort_values('Alpha', ascending=False)
                        
                        # Afficher les r√©sultats
                        st.subheader("R√©sultats du backtest")
                        st.dataframe(results_df.style.format({
                            'Retour strat√©gie': '{:.2f}%',
                            'Retour march√©': '{:.2f}%',
                            'Alpha': '{:.2f}%',
                            'Max Drawdown': '{:.2f}%',
                            'Taux r√©ussite long': '{:.1f}%',
                            'Taux r√©ussite short': '{:.1f}%'
                        }), use_container_width=True)
                        
                        # Afficher les meilleurs param√®tres
                        if not results_df.empty:
                            best_params = results_df.iloc[0]
                            
                            st.success(f"""
                            **Meilleurs param√®tres trouv√©s:**
                            - SMA Court: {int(best_params['SMA court'])}
                            - SMA Long: {int(best_params['SMA long'])}
                            - RSI: {int(best_params['RSI'])}
                            - Alpha g√©n√©r√©: {best_params['Alpha']:.2f}%
                            - Drawdown maximum: {best_params['Max Drawdown']:.2f}%
                            """)
                            
                            # Appliquer les meilleurs param√®tres et visualiser
                            best_df = backtest_data.copy()
                            best_df = add_sma(best_df, short=int(best_params['SMA court']), long=int(best_params['SMA long']))
                            best_df = compute_rsi(best_df, window=int(best_params['RSI']))
                            best_df = compute_macd(best_df)
                            best_df = generate_signals(best_df)
                            best_df = evaluate_signals(best_df)
                            best_df = backtest_signals(best_df)
                            
                            fig = plot_trading_strategy(best_df, backtest_ticker)
                            st.plotly_chart(fig, use_container_width=True)
                            
                            # Graphique de comparaison des performances
                            perf_fig = go.Figure()
                                
                            perf_fig.add_trace(go.Scatter(
                                x=best_df.index,
                                y=best_df['Cumulative_Strategy_Return'] * 100,
                                mode='lines',
                                name='Strat√©gie optimis√©e',
                                line=dict(color='green', width=2)
                            ))
                            
                            perf_fig.add_trace(go.Scatter(
                                x=best_df.index,
                                y=best_df['Cumulative_Market_Return'] * 100,
                                mode='lines',
                                name='Buy & Hold',
                                line=dict(color='gray', width=1.5, dash='dot')
                            ))
                            
                            perf_fig.update_layout(
                                title="Performance cumul√©e avec param√®tres optimis√©s (%)",
                                xaxis_title="Date",
                                yaxis_title="Rendement (%)",
                                legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1),
                                template='plotly_white'
                            )
                            
                            st.plotly_chart(perf_fig, use_container_width=True)
                            
        with backtest_col2:
            # Cette colonne est utilis√©e pour afficher les r√©sultats du backtest
            st.info("üëà Configurez les param√®tres du backtest et cliquez sur 'Lancer le backtest' pour optimiser votre strat√©gie")
    
    # Onglet 4: Mode d'Emploi (NOUVEAU)
    with tabs[3]:
        create_user_guide()
    
    # Onglet 5: √Ä propos
    with tabs[4]:
        st.subheader("√Ä propos de cette application")
        
        st.markdown("""
        ## Strat√©gie de Trading Multi-Facteurs avec Visualisation Interactive

        ### Pourquoi ce projet ?
        Les march√©s financiers sont influenc√©s par :
        - üìà des indicateurs techniques (prix, tendances)
        - üì∞ des √©v√©nements d'actualit√© (d√©cisions politiques, annonces d'entreprises)
        - üìä des donn√©es fondamentales (sant√© financi√®re des entreprises)

        Notre objectif est de construire une application compl√®te d'aide √† la d√©cision pour d√©tecter les bons moments pour acheter ou vendre √† d√©couvert une action.

        ### Ce que notre programme fait
        Notre outil :
        1. R√©cup√®re automatiquement les donn√©es boursi√®res d'une action
        2. Calcule plusieurs indicateurs techniques (SMA, RSI, MACD, Bollinger)
        3. R√©cup√®re et analyse les news r√©centes li√©es √† l'action (via API)
        4. √âvalue la solidit√© financi√®re de l'entreprise √† travers des ratios fondamentaux
        5. G√©n√®re un signal d'achat ou de short, selon l'analyse combin√©e
        6. Fait un backtest historique pour √©valuer la strat√©gie
        7. Pr√©sente les r√©sultats sur une interface web claire avec:
           - R√©sum√© des signaux
           - Graphiques interactifs
           - Statistiques de performance

        ### √Ä quels besoins √ßa r√©pond ?
        - Comment automatiser une veille financi√®re intelligente
        - Comment √©viter les biais √©motionnels dans le trading
        - Comment combiner analyse technique + fondamentale + actualit√©s
        - Comment cr√©er un outil intuitif qu'on pourrait utiliser chaque semaine

        ### Pistes pour aller plus loin
        - Ajouter la possibilit√© de tester plusieurs strat√©gies (choix des indicateurs √† la vol√©e)
        - Int√©grer des donn√©es macro√©conomiques suppl√©mentaires
        - Connecter l'app √† un compte de trading d√©mo (pour tester en conditions r√©elles)
        - Ajouter un moteur de recommandation automatique d'actions √† suivre

        ### En r√©sum√©
        Un outil complet, intelligent, interactif et p√©dagogique qui peut √™tre utilis√© chaque semaine par un investisseur pour prendre des d√©cisions plus rationnelles et document√©es.
        """)

# *** Point d'entr√©e principal de l'application ***

if __name__ == "__main__":
    create_streamlit_app()
